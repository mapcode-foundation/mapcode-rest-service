<?xml version="1.0"?>
<!--
  ~ Copyright (C) 2016-2017, Stichting Mapcode Foundation (http://www.mapcode.com)
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~     http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->

<web-app xmlns="http://java.sun.com/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd"
         version="3.0"
         metadata-complete="true">

    <display-name>Mapcode REST API Web Services</display-name>

    <context-param>
        <param-name>resteasy.guice.modules</param-name>
        <param-value>
            com.tomtom.speedtools.rest.ServicesModule,
            com.mapcode.services.ResourcesModule,
            com.mapcode.services.deployment.DeploymentModule
        </param-value>
    </context-param>

    <context-param>
        <param-name>resteasy.use.builtin.providers</param-name>
        <param-value>true</param-value>
    </context-param>

    <context-param>
        <param-name>resteasy.providers</param-name>
        <param-value>
            com.tomtom.speedtools.rest.security.CorsFeature
        </param-value>
    </context-param>

    <context-param>
        <param-name>resteasy.async.job.service.enabled</param-name>
        <param-value>true</param-value>
    </context-param>

    <context-param>
        <param-name>resteasy.async.job.service.max.job.results</param-name>
        <param-value>100</param-value>
    </context-param>

    <context-param>
        <param-name>resteasy.async.job.service.max.wait</param-name>
        <param-value>300000</param-value>
    </context-param>

    <context-param>
        <param-name>resteasy.async.job.service.thread.pool.size</param-name>
        <param-value>100</param-value>
    </context-param>

    <context-param>
        <param-name>resteasy.async.job.service.base.path</param-name>
        <param-value>/asyncjobs</param-value>
    </context-param>

    <!-- Replace the default bootstrap servlet container listener with a version that logs
         warnings and errors to the logger, for debugging purposes.
    -->
    <listener>
        <listener-class>
            com.tomtom.speedtools.guice.LoggingGuiceResteasyBootstrapServletContextListener
        </listener-class>
    </listener>

    <!-- Include a custom listener for a shutdown request, to try and shut down the Akka
         system properly, so actors can flush their info, if required.
    -->
    <listener>
        <listener-class>
            com.tomtom.speedtools.rest.Shutdown
        </listener-class>
    </listener>

    <!-- Include a custom listener for a shutdown request, to try and shut down the Akka
         system properly, so actors can flush their info, if required.
    -->
    <servlet>
        <servlet-name>Resteasy</servlet-name>

        <!--
            We use a custom dispatcher in order to be able to access the HttpServletRequest
            in an Resteasy interceptor.
        -->
        <servlet-class>
            com.tomtom.speedtools.rest.CustomHttpServlet30Dispatcher
        </servlet-class>

        <!-- Original servlet dispatcher:
        <servlet-class>
            org.jboss.resteasy.plugins.server.servlet.HttpServletDispatcher
        </servlet-class>
        -->

        <async-supported>true</async-supported>
    </servlet>

    <!-- Map the URL address space to the Resteasy servlet defined above, so Resteasy will
         process these URLs.
    -->
    <servlet-mapping>
        <servlet-name>Resteasy</servlet-name>
        <url-pattern>/*</url-pattern>
    </servlet-mapping>

    <servlet>
        <servlet-name>jolokia-agent</servlet-name>
        <servlet-class>org.jolokia.http.AgentServlet</servlet-class>
        <load-on-startup>1</load-on-startup>
    </servlet>

    <servlet-mapping>
        <servlet-name>jolokia-agent</servlet-name>
        <url-pattern>/monitor/*</url-pattern>
    </servlet-mapping>
</web-app>
